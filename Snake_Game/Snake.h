#pragma once
#include <vector>

/**
 * Так ёбана с этого места по подробнее
 *
 * Змейка это список элементов где расположение должно меняться только
 *	у последнего элемента
 *
 *	Ну чё ёбаный врот ебанём кастрированный двусвязный список ?
 *	не, вроде не правильно и слишком радикально, но как концепцию оставим
 *
 *	Первый концепт
 *
 *		Воспользуемся массивом пар в котором будут храниться каординаты всех элементов змеи
 *			и чтобы не пересоздавать его по несколько раз зададим ему copaсiti 
 *		И будем хранить данные местоположения элементов змеи
 *
 *		При тике нужно пройтись по всему массиву и обновить у всех элементов значения 
 *
 *	Второй концепт
 *
 *		Воспользоваться списком и переставлять последний элемент на место первого с обновлённой локацией
 *		Но нам всёрвно потребуется массив в котором будут лежать вся информация о локациях
 *		Тоже шиза не катит
 *
 *	Третья концепция
 *
 *		Смотрим в корень создаём обычный массив и переопределяем элементы по очереди сохроняя индекс головы
 *			* - голова
 *		*2.1, 1.1, 0.1
 *		2.1, 1.1, *3.1
 *		2.1, *4.1, 3.1
 *
 *	Скорее всего мы элемент Snake полностью уберём в Map
 */


/*
 * Змейка должна иметь
 *
 * *Желаемый шаг
 * *Массив элементов
 * *Итератор как индекс головы
 *
 *	Методы
 *   *Конструктор(pait<int,int> каординаты_для_старта_отрисовки )
 *		должен получать только расположение головы на старте для первой отрисовки.
 *		
 *   *Шаг(char ключ_для_поворота)
 *		метод в котором будет задоваться шаг и обнавляться положение головы.
 *		
 *	 *Добавление элемента()
 *		элемент должен добавдялться перед головой для устранения накопления погрешности.
 *
 *	 *ГеттерыВсехМастей
 *		ГетМассив, ГетИтераторГоловы, 
 *	 
 */


class Snake
{

	std::pair<int, int> snake_direction;

	std::vector<std::pair<int, int>> snake_length;

	std::vector<std::pair<int, int>>::iterator head_iterator;

	//unsigned int head_index;
	
public:

	/*
	unsigned int GetHeatIndex()
	{
		return head_index;
	}*/

	std::vector<std::pair<int, int>>::iterator GetHeatIterator()
	{
		return head_iterator;
	}

	std::vector<std::pair<int, int>>& GetArr()
	{
		return snake_length;
	}
	

	Snake(unsigned int map_width);

	void SetDirection(char a);

	void AddElement();

};

